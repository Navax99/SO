ps -s #zombie

getpagesize - get memory page size

SYNOPSIS
       #include <unistd.h>

       int getpagesize(void);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       getpagesize(): _BSD_SOURCE || _XOPEN_SOURCE >= 500

DESCRIPTION
       The  function getpagesize() returns the number of bytes in a page, where a "page"
       is the thing used where it says in the description  of  mmap(2)  that  files  are
       mapped in page-sized units.

       The size of the kind of pages that mmap(2) uses, is found using
       The  -n  switch  causes the header to be displayed only once rather than periodi‐
       cally.
           #include <unistd.h>
           long sz = sysconf(_SC_PAGESIZE);
       The  -n  switch  causes the header to be displayed only once rather than periodi‐
       cally.
       (most systems allow the synonym _SC_PAGE_SIZE for _SC_PAGESIZE), or

           #include <unistd.h>
           int sz = getpagesize();



       free - Display amount of free and used memory in the system

SYNOPSIS
       free [-b | -k | -m | -g] [-o] [-s delay ] [-t] [-V]

DESCRIPTION       The  -n  switch  causes the header to be displayed only once rather than periodi‐
       cally.
       free  displays  the total amount of free and used physical and swap memory in the
       system, as well as the buffers used by the  kernel.   The  shared  memory  column
       should be ignored; it is obsolete.

   Options
       The  -b  switch  displays  the  amount  of memory in bytes; the -k switch (set by
       default) displays it in kilobytes; the -m switch displays it in megabytes; the -g
       switch displays it in gigabytes.


       vmstat - Report virtual memory statistics

SYNOPSIS
       vmstat [-a] [-n] [delay [ count]]
       vmstat [-f] [-s] [-m]
       vmstat [-S unit]
       vmstat [-d]
       vmstat [-D]
       vmstat [-p disk partition]
       vmstat [-V]

DESCRIPTION
       vmstat  reports  information  about  processes,  memory, paging, block IO, traps,
       disks and cpu activity.

       The first report produced gives  averages  since  the  last  reboot.   Additional
       reports  give  information on a sampling period of length delay.  The process and
       memory reports are instantaneous in either case.

       The  -n  switch  causes the header to be displayed only once rather than periodi‐
       cally.


       top - display Linux tasks

SYNOPSIS
       top -hv | -bcHisS -d delay -n iterations -p pid [, pid ...]

       The traditional switches '-' and whitespace are optional.

DESCRIPTION
       The  top  program  provides a dynamic real-time view of a running system.  It can
       display system summary information as well as a list  of  tasks  currently  being
       managed  by  the Linux kernel.  The types of system summary information shown and
       the types, order and size of information displayed for tasks are all user config‐
       urable and that configuration can be made persistent across restarts.

       The  program provides a limited interactive interface for process manipulation as
       well as a much more extensive interface for personal  configuration   --   encom‐
       passing  every  aspect of its operation.  And while top is referred to throughout
       this document, you are free to name the program  anything  you  wish.   That  new
       name,  possibly  an  alias, will then be reflected on top's display and used when
       reading and writing a configuration file.

         <f> and <o> :Fields_select or Order_fields
              These keys display separate screens where you can change which fields  are
              displayed  and  their order.  For additional information on these interac‐
              tive commands see topic 2b. SELECTING and ORDERING Columns.


       #proc - process information pseudo-file system

DESCRIPTION
       The  proc  file  system  is a pseudo-file system which is used as an interface to
       kernel data structures.  It is commonly mounted at /proc.  Most of  it  is  read-
       only, but some files allow kernel variables to be changed.

/proc/[pid]/stat
              Status information about the process.  This  is  used  by  ps(1).   It  is
              defined in /usr/src/linux/fs/proc/array.c.

              The fields, in order, with their proper scanf(3) format specifiers, are:

              pid %d      The process ID.

              comm %s     The filename of the executable, in parentheses.  This is visi‐
                          ble whether or not the executable is swapped out.

              state %c    One character from the string "RSDZTW" where R is  running,  S
                          is sleeping in an interruptible wait, D is waiting in uninter‐
                          ruptible disk sleep, Z is zombie, T is traced or stopped (on a
                          signal), and W is paging.

              ppid %d     The PID of the parent.

              pgrp %d     The process group ID of the process.

              session %d  The session ID of the process.

              tty_nr %d   The  controlling  terminal  of the process.  (The minor device
                          number is contained in the combination of bits 31 to 20 and  7
                          to 0; the major device number is in bits 15 t0 8.)

              tpgid %d    The ID of the foreground process group of the controlling ter‐
                          minal of the process.

              flags %u (%lu before Linux 2.6.22)
                          The kernel flags word of the process.  For bit  meanings,  see
                          the  PF_*  defines  in <linux/sched.h>.  Details depend on the
                          kernel version.

              minflt %lu  The number of minor faults the process has made which have not
                          required loading a memory page from disk.

              cminflt %lu The number of minor faults that the process's waited-for chil‐
                          dren have made.

              majflt %lu  The number of major faults the process  has  made  which  have
                          required loading a memory page from disk.

              cmajflt %lu The number of major faults that the process's waited-for chil‐
                          dren have made.

              utime %lu   Amount of time that this process has been  scheduled  in  user
                          mode, measured in clock ticks (divide by sysconf(_SC_CLK_TCK).
                          This includes guest time, guest_time  (time  spent  running  a
                          virtual  CPU,  see  below),  so that applications that are not
                          aware of the guest time field do not lose that time from their
                          calculations.

              stime %lu   Amount  of time that this process has been scheduled in kernel
                          mode, measured in clock ticks (divide by sysconf(_SC_CLK_TCK).

              cutime %ld  Amount of time that this process's  waited-for  children  have
                          been  scheduled  in user mode, measured in clock ticks (divide
                          by sysconf(_SC_CLK_TCK).  (See also times(2).)  This  includes
                          guest time, cguest_time (time spent running a virtual CPU, see
                          below).

              cstime %ld  Amount of time that this process's  waited-for  children  have
                          been scheduled in kernel mode, measured in clock ticks (divide
                          by sysconf(_SC_CLK_TCK).

              priority %ld
                          (Explanation for Linux 2.6) For processes running a  real-time
                          scheduling  policy  (policy below; see sched_setscheduler(2)),
                          this is the negated scheduling priority, minus one; that is, a
                          number  in  the  range  -2 to -100, corresponding to real-time
                          priorities 1 to 99.  For processes running under  a  non-real-
                          time  scheduling policy, this is the raw nice value (setprior‐
                          ity(2)) as represented in the kernel.  The kernel stores  nice
                          values  as  numbers  in the range 0 (high) to 39 (low), corre‐
                          sponding to the user-visible nice range of -20 to 19.

                          Before Linux 2.6, this was a scaled value based on the  sched‐
                          uler weighting given to this process.

              nice %ld    The  nice  value (see setpriority(2)), a value in the range 19
                          (low priority) to -20 (high priority).

              num_threads %ld
                          Number of threads in this process (since Linux  2.6).   Before
                          kernel  2.6,  this  field was hard coded to 0 as a placeholder
                          for an earlier removed field.

              itrealvalue %ld
                          The time in jiffies before the next SIGALRM  is  sent  to  the
                          process  due  to an interval timer.  Since kernel 2.6.17, this
                          field is no longer maintained, and is hard coded as 0.

              starttime %llu (was %lu before Linux 2.6)
                          The time in jiffies the process started after system boot.

              vsize %lu   Virtual memory size in bytes.

              rss %ld     Resident Set Size: number of pages the  process  has  in  real
                          memory.   This  is  just  the  pages which count towards text,
                          data, or stack space.  This does not include pages which  have
                          not been demand-loaded in, or which are swapped out.

              rsslim %lu  Current soft limit in bytes on the rss of the process; see the
                          description of RLIMIT_RSS in getpriority(2).

              startcode %lu
                          The address above which program text can run.

              endcode %lu The address below which program text can run.

              startstack %lu
                          The address of the start (i.e., bottom) of the stack.

              kstkesp %lu The current value of ESP (stack pointer), as found in the ker‐
                          nel stack page for the process.

              kstkeip %lu The current EIP (instruction pointer).

              signal %lu  The  bitmap of pending signals, displayed as a decimal number.
                          Obsolete, because it does not provide information on real-time
                          signals; use /proc/[pid]/status instead.

              blocked %lu The  bitmap of blocked signals, displayed as a decimal number.
                          Obsolete, because it does not provide information on real-time
                          signals; use /proc/[pid]/status instead.

              sigignore %lu
                          The  bitmap of ignored signals, displayed as a decimal number.
                          Obsolete, because it does not provide information on real-time
                          signals; use /proc/[pid]/status instead.

              sigcatch %lu
                          The  bitmap  of caught signals, displayed as a decimal number.
                          Obsolete, because it does not provide information on real-time
                          signals; use /proc/[pid]/status instead.

              wchan %lu   This  is the "channel" in which the process is waiting.  It is
                          the address of a system call,  and  can  be  looked  up  in  a
                          namelist  if  you need a textual name.  (If you have an up-to-
                          date /etc/psdatabase, then try ps -l to see the WCHAN field in
                          action.)

              nswap %lu   Number of pages swapped (not maintained).

              cnswap %lu  Cumulative nswap for child processes (not maintained).

              exit_signal %d (since Linux 2.1.22)
                          Signal to be sent to parent when we die.

              processor %d (since Linux 2.2.8)
                          CPU number last executed on.

              rt_priority %u (since Linux 2.5.19; was %lu before Linux 2.6.22)
                          Real-time  scheduling  priority, a number in the range 1 to 99
                          for processes scheduled under a real-time policy,  or  0,  for
                          non-real-time processes (see sched_setscheduler(2)).

              policy %u (since Linux 2.5.19; was %lu before Linux 2.6.22)
                          Scheduling  policy  (see sched_setscheduler(2)).  Decode using
                          the SCHED_* constants in linux/sched.h.

              delayacct_blkio_ticks %llu (since Linux 2.6.18)
                          Aggregated block I/O delays, measured  in  clock  ticks  (cen‐
                          tiseconds).

              guest_time %lu (since Linux 2.6.24)
                          Guest  time  of  the process (time spent running a virtual CPU
                          for a guest operating system), measured in clock ticks (divide
                          by sysconf(_SC_CLK_TCK).

              cguest_time %ld (since Linux 2.6.24)
                          Guest  time of the process's children, measured in clock ticks
                          (divide by sysconf(_SC_CLK_TCK).



       brk, #sbrk - change data segment size
       sbrk(0); #devuelve el puntero de fin de heap;

SYNOPSIS
       #include <unistd.h>

       int brk(void *addr);

       void *sbrk(intptr_t increment);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       brk(), sbrk(): _BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE >= 500

DESCRIPTION
       brk()  and  sbrk()  change the location of the program break, which defines the end of
       the process's data segment (i.e., the program break is the first  location  after  the
       end  of  the uninitialized data segment).  Increasing the program break has the effect
       of allocating memory to the process; decreasing the break deallocates memory.

       brk() sets the end of the data segment to the value specified by addr, when that value
       is reasonable, the system has enough memory, and the process does not exceed its maxi‐
       mum data size (see setrlimit(2)).

       sbrk() increments the program's data space by increment bytes.  Calling sbrk() with an
       increment of 0 can be used to find the current location of the program break.

       brk, #sbrk - change data segment size

SYNOPSIS
       #include <unistd.h>

       int brk(void *addr);

       void *sbrk(intptr_t increment);

   Feature Test Macro Requirements for glibc (see feature_test_macros(7)):

       brk(), sbrk(): _BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE >= 500

DESCRIPTION
       brk()  and  sbrk()  change the location of the program break, which defines the end of
       the process's data segment (i.e., the program break is the first  location  after  the
       end  of  the uninitialized data segment).  Increasing the program break has the effect
       of allocating memory to the process; decreasing the break deallocates memory.

       brk() sets the end of the data segment to the value specified by addr, when that value
       is reasonable, the system has enough memory, and the process does not exceed its maxi‐
       mum data size (see setrlimit(2)).

       sbrk() increments the program's data space by increment bytes.  Calling sbrk() with an
       increment of 0 can be used to find the current location of the program break.


       #getrusage - get resource usage

SYNOPSIS
       #include <sys/time.h>
       #include <sys/resource.h>

       int getrusage(int who, struct rusage *usage);

DESCRIPTION
       getrusage()  returns  resource usage measures for who, which can be one of the follow‐
       ing:

       RUSAGE_SELF
              Return resource usage statistics for the calling process, which is the  sum  of
              resources used by all threads in the process.

       RUSAGE_CHILDREN
              Return  resource  usage statistics for all children of the calling process that
              have terminated and  been  waited  for.   These  statistics  will  include  the
              resources used by grandchildren, and further removed descendants, if all of the
              intervening descendants waited on their terminated children.

       RUSAGE_THREAD (since Linux 2.6.26)
              Return resource usage statistics for the calling thread.

       The resource usages are returned in the structure pointed to by usage, which  has  the
       following form:

           struct rusage {
               struct timeval ru_utime; /* user time used */
               struct timeval ru_stime; /* system time used */
               long   ru_maxrss;        /* maximum resident set size */
               long   ru_ixrss;         /* integral shared memory size */
               long   ru_idrss;         /* integral unshared data size */
               long   ru_isrss;         /* integral unshared stack size */
               long   ru_minflt;        /* page reclaims */
               long   ru_majflt;        /* page faults */
               long   ru_nswap;         /* swaps */
               long   ru_inblock;       /* block input operations */
               long   ru_oublock;       /* block output operations */
               long   ru_msgsnd;        /* messages sent */
               long   ru_msgrcv;        /* messages received */
               long   ru_nsignals;      /* signals received */
               long   ru_nvcsw;         /* voluntary context switches */
               long   ru_nivcsw;        /* involuntary context switches */
           };
